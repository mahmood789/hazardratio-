# Load libraries 
library(shiny)
library(shinythemes)
library(bs4Dash)
library(meta)
library(dmetar)
library(readxl)
library(dplyr)
library(metasens)
library(metafor)
library(ggplot2)
library(ggbeeswarm)
library(MuMIn)
library(lattice)
library(glue)
library(bayesmeta)

## UI definition
ui <- bs4DashPage(
  title = "786-MIII HR Forest Plot",
  
  # Header
  header = bs4DashNavbar(
    title = "786-MIII Hazard Ratio Meta-Analysis Dashboard",
    skin = "light"
  ),
  
  # Sidebar with navigation
  sidebar = bs4DashSidebar(
    skin = "dark",
    bs4SidebarMenu(
      bs4SidebarMenuItem("Data & Options", tabName = "inputs", icon = icon("upload")),
      bs4SidebarMenuItem("General Info", tabName = "general", icon = icon("info-circle")),
      # NEW: Descriptive Stats tab
      bs4SidebarMenuItem("Descriptive Stats", tabName = "descstats", icon = icon("chart-bar")),
      bs4SidebarMenuItem("Forest Plots", icon = icon("tree"),
                         bs4SidebarMenuSubItem("View & Options", tabName = "forest_view", icon = icon("chart-bar"))
      ),
      bs4SidebarMenuItem("Publication Bias", tabName = "pubbias", icon = icon("exclamation-triangle")),
      bs4SidebarMenuItem("Heterogeneity & Sensitivity", tabName = "hetero", icon = icon("balance-scale")),
      bs4SidebarMenuItem("Meta-Regression", tabName = "meta_reg", icon = icon("project-diagram")),
      bs4SidebarMenuItem("Other Analyses", tabName = "other", icon = icon("cogs")),
      bs4SidebarMenuItem("Subgroup Analysis", tabName = "subgroup_analysis", icon = icon("th-large"))
    )
  ),
  
  # Controlbar (not used)
  controlbar = bs4DashControlbar(),
  
  # Main body with tabs
  body = bs4DashBody(
    tabItems(
      # Data & Options Tab
      tabItem(
        tabName = "inputs",
        fluidRow(
          box(
            title = "Data Input & Basic Options",
            status = "primary",
            solidHeader = TRUE,
            width = 12,
            p("Upload your CSV file. The file must include the following labels: HR, seHR, author. 
              For metaâ€‘regression also include: Reg, Reg2, Reg3, and optionally a Subgroup column for subgroup analysis."),
            fileInput("fileInput", "Upload CSV File", 
                      accept = c("text/csv", "text/comma-separated-values,text/plain", ".csv")),
            tags$hr(),
            selectInput("method.tau", "Heterogeneity Method:",
                        choices = c("DL" = "DL", "REML" = "REML", "PM" = "PM", "EB" = "EB", "SJ" = "SJ"),
                        selected = "PM"),
            selectInput("effectModel", "Effect Model:",
                        choices = c("Random" = "RE", "Fixed" = "FE"),
                        selected = "RE"),
            selectInput("dataType", "Data Type:", choices = c("Hazard Ratio" = "HR"), selected = "HR"),
            tags$hr(),
            sliderInput("xRange", "Forest Plot X-axis Range (HR scale):", 
                        min = 0.2, max = 3, value = c(0.8, 1.2), step = 0.1),
            tags$hr(),
            sliderInput("plotHeight", "Plot Height:", min = 300, max = 1000, value = 600),
            sliderInput("plotWidth", "Plot Width:", min = 300, max = 1000, value = 800)
          )
        ),
        fluidRow(
          box(
            title = "Download Options",
            status = "info",
            solidHeader = TRUE,
            width = 12,
            downloadButton("downloadForestPlot", "Download Ordinary Forest Plot"),
            downloadButton("downloadPlotRevman5", "Download RevMan Plot"),
            downloadButton("downloadPlotJAMA", "Download JAMA Plot"),
            downloadButton("downloadPlotmeta", "Download HR Meta Plot"),
            downloadButton("downloadFunnelPlot", "Download Funnel Plot"),
            downloadButton("downloadTrimFillPlot", "Download Trim & Fill Plot"),
            downloadButton("downloadBaujatPlot", "Download Baujat Plot"),
            downloadButton("downloadRadialPlot", "Download Radial Plot"),
            downloadButton("downloadDraperyPlot", "Download Drapery Plot"),
            downloadButton("downloadCumForestPlot", "Download Cumulative Forest Plot"),
            downloadButton("downloadEggerTest", "Download Egger's Test Output"),
            downloadButton("downloadModCorrPlot", "Download Moderator Correlation Plot"),
            downloadButton("downloadTimeTrendPlot", "Download Time-Trend Plot")
          )
        )
      ),
      
      # General Info Tab
      tabItem(
        tabName = "general",
        fluidRow(
          box(
            title = "General Information",
            width = 12,
            htmlOutput("sampleCSV"),
            uiOutput("why")
          )
        ),
        fluidRow(
          box(
            title = "Preview of Uploaded Data (first 5 rows)",
            width = 12,
            status = "info",
            solidHeader = TRUE,
            verbatimTextOutput("dataHead")
          )
        ),
        fluidRow(
          box(
            title = "Main Meta Summary",
            width = 12,
            status = "primary",
            solidHeader = TRUE,
            verbatimTextOutput("mainMetaText")
          )
        )
      ),
      
      # >>> NEW DESCRIPTIVE STATS TAB <<<
      tabItem(
        tabName = "descstats",
        fluidRow(
          box(
            title = "Descriptive Statistics & Plots",
            width = 12,
            status = "info",
            solidHeader = TRUE,
            tabBox(
              width = 12,
              tabPanel("Data Summary", verbatimTextOutput("descSummary")),
              tabPanel("Histogram of log(HR)", plotOutput("histLogHR")),
              tabPanel("Histogram of HR", plotOutput("histHR")),
              tabPanel("Beeswarm Plot", plotOutput("beeswarmPlot"),
                       p("Displays individual log(HR) points with jitter to visualize the distribution."))
            )
          )
        )
      ),
      
      # Forest Plots Tab
      tabItem(
        tabName = "forest_view",
        fluidRow(
          column(width = 4,
                 box(
                   title = "Forest Plot Options",
                   status = "warning",
                   solidHeader = TRUE,
                   width = NULL,
                   selectInput("col.diamond", "Diamond Color:", 
                               choices = c("Red", "Blue", "Green", "Purple", "Orange",
                                           "Brown", "Pink", "Yellow", "Black"),
                               selected = "Black"),
                   selectInput("col.diamond.lines", "Diamond Line Color:", 
                               choices = c("Red", "Blue", "Green", "Orange",
                                           "Brown", "Pink", "Yellow", "Black"),
                               selected = "Yellow"),
                   selectInput("col.square", "Square Color:", 
                               choices = c("Red", "Blue", "Green", "Purple", "Orange",
                                           "Brown", "Pink", "Grey", "Yellow", "Black"),
                               selected = "Blue"),
                   selectInput("col.square.lines", "Square Line Color:", 
                               choices = c("Red", "Blue", "Green", "Purple", "Orange",
                                           "Brown", "Pink", "Grey", "Yellow", "Black"),
                               selected = "Black"),
                   selectInput("col.study", "Study Label Color:", 
                               choices = c("Red", "Blue", "Green", "Purple", "Orange",
                                           "Brown", "Pink", "Grey", "Yellow", "Black"),
                               selected = "Green"),
                   selectInput("col.circle", "Circle Color:", 
                               choices = c("Red", "Blue", "Green", "Purple", "Orange",
                                           "Brown", "Pink", "Grey", "Yellow", "Black"),
                               selected = "Yellow"),
                   selectInput("col.circle.lines", "Circle Line Color:", 
                               choices = c("Red", "Blue", "Green", "Purple", "Orange",
                                           "Brown", "Pink", "Grey", "Yellow", "Black"),
                               selected = "Black"),
                   checkboxInput("labstudies", "Show Study Labels", value = TRUE),
                   sliderInput("textsize", "Text Size:", min = 0.5, max = 2, value = 1, step = 0.1),
                   sliderInput("linewidth", "Line Width:", min = 0.5, max = 5, value = 1, step = 0.1),
                   textInput("label", "Left Label:", value = ""),
                   textInput("labelr", "Right Label:", value = "")
                 )
          ),
          column(width = 8,
                 box(
                   title = "Forest Plots",
                   status = "primary",
                   solidHeader = TRUE,
                   width = NULL,
                   tabBox(
                     width = NULL,
                     tabPanel("Ordinary", 
                              tags$div(
                                plotOutput("forestPlot", width = "1200px"),
                                style = "overflow-x: auto; width: 100%;"
                              )
                     ),
                     tabPanel("JAMA", plotOutput("forestPlotJAMA")),
                     tabPanel("RevMan", plotOutput("forestPlotRevman5")),
                     tabPanel("HR Meta-Analysis", plotOutput("MA")),
                     tabPanel("Drapery", plotOutput("drapery")),
                     tabPanel("Forest Plot (HR Scale)", plotOutput("forestPlotHR"),
                              p("Shows Hazard Ratios on the original scale (atransf=exp)."))
                   )
                 )
          )
        )
      ),
      
      # Publication Bias Tab
      tabItem(
        tabName = "pubbias",
        fluidRow(
          column(width = 4,
                 box(
                   title = "Funnel Plot Options",
                   status = "warning",
                   solidHeader = TRUE,
                   width = NULL,
                   sliderInput("funnelXRange", "Funnel Plot X-axis Range:", 
                               min = 0.1, max = 10, value = c(0.8, 1.2), step = 0.1),
                   checkboxInput("colorFunnel", "Color-Enhanced Funnel Plot", FALSE)
                 )
          ),
          column(width = 8,
                 box(
                   title = "Publication Bias",
                   status = "primary",
                   solidHeader = TRUE,
                   width = NULL,
                   tabBox(
                     width = NULL,
                     tabPanel("Bias Text", verbatimTextOutput("pubbias")),
                     tabPanel("Funnel Plot", plotOutput("funnelPlot")),
                     tabPanel("Trim & Fill", plotOutput("Trimfill")),
                     tabPanel("Limit Meta Curve", plotOutput("lm")),
                     tabPanel("Shrunken Limit Meta", plotOutput("lm2")),
                     tabPanel("Egger's Test", verbatimTextOutput("eggerTest")),
                     tabPanel("Begg's Test", verbatimTextOutput("beggTest")),
                     tabPanel("Copas Selection Model", 
                              verbatimTextOutput("copasOutput"),
                              plotOutput("copasPlot"))
                   )
                 )
          )
        )
      ),
      
      # Heterogeneity & Sensitivity Tab
      tabItem(
        tabName = "hetero",
        fluidRow(
          box(
            title = "Heterogeneity & Sensitivity",
            width = 12,
            tabBox(
              width = 12,
              tabPanel("Heterogeneity Text", verbatimTextOutput("hetro")),
              tabPanel("Baujat Plot", plotOutput("Baujatplot")),
              tabPanel("Radial Plot", plotOutput("radial")),
              tabPanel("Leave-One-Out Analysis", verbatimTextOutput("leaveOneOutText")),
              # New: TauÂ² Profile
              tabPanel("TauÂ² Profile",
                       plotOutput("tau2ProfilePlot"),
                       verbatimTextOutput("tau2ProfileText"),
                       p("Shows how the model deviance changes with different tauÂ² values. 
                          Helps confirm if the estimated tauÂ² is well-defined.")),
              tabPanel("Influence Diagnostics",
                       plotOutput("influencePlot"),
                       verbatimTextOutput("influenceText"),
                       p("Identifies studies that strongly influence the model fit."))
            )
          )
        )
      ),
      
      # Meta-Regression Tab
      tabItem(
        tabName = "meta_reg",
        fluidRow(
          box(
            title = "Meta-Regression",
            width = 12,
            tabBox(
              width = 12,
              tabPanel("Meta-Regression", 
                       checkboxInput("includeModerator", "Include Moderator in Meta-Regression", value = TRUE),
                       verbatimTextOutput("metareg")
              ),
              tabPanel("Two Moderator Regression", verbatimTextOutput("singleMetaregText")),
              tabPanel("Three Moderator Regression", verbatimTextOutput("threeMetaregText")),
              tabPanel("Bubble Plot", plotOutput("BubblePlot")),
              tabPanel("Selector Bubble Plot", 
                       fluidRow(
                         column(4, selectInput("selectedModerator", "Select Moderator:", 
                                               choices = c("Reg", "Reg2", "Reg3"), selected = "Reg")),
                         column(8, plotOutput("singleBubblePlot"))
                       )
              ),
              tabPanel("Moderator Correlation", 
                       plotOutput("modCorrPlot"),
                       downloadButton("downloadModCorrPlot", "Download Moderator Correlation Plot")
              ),
              tabPanel("Multiple Meta-Regression Analytics", plotOutput("mmreg"))
            )
          )
        )
      ),
      
      # Other Analyses Tab
      tabItem(
        tabName = "other",
        fluidRow(
          box(
            title = "Other Analyses",
            width = 12,
            tabBox(
              width = 12,
              tabPanel("Cumulative Meta-Analysis Text", verbatimTextOutput("cumMetaText")),
              tabPanel("Cumulative Forest Plot", plotOutput("cumForestPlot")),
              tabPanel("Time-Trend Meta-Regression", 
                       verbatimTextOutput("timeTrendText"),
                       plotOutput("timeTrendPlot")
              ),
              tabPanel("Bayesian Meta-Analysis", verbatimTextOutput("bayesianMetaText"))
            )
          )
        )
      ),
      
      # Subgroup Analysis Tab
      tabItem(
        tabName = "subgroup_analysis",
        fluidRow(
          box(
            title = "Subgroup Analysis",
            width = 12,
            status = "primary",
            solidHeader = TRUE,
            tabBox(
              width = 12,
              tabPanel("Subgroup Results",
                       verbatimTextOutput("subgroupText")
              ),
              tabPanel("Subgroup Forest Plot",
                       plotOutput("subgroupForestPlot"),
                       br(),
                       downloadButton("downloadSubgroupForestPlot", "Download Subgroup Forest Plot")
              )
            )
          )
        )
      )
    )
  ),
  
  # Footer
  footer = bs4DashFooter("Copyright Â© 2025 Your Name or Organization")
)

## SERVER FUNCTION
server <- function(input, output, session) {
  
  # Reactive expression to read CSV file
  dataInput <- reactive({
    req(input$fileInput)
    read.csv(input$fileInput$datapath)
  })
  
  # Preview of first rows of the data
  output$dataHead <- renderPrint({
    req(dataInput())
    head(dataInput(), 5)
  })
  
  output$why <- renderUI({
    HTML("<p>'He has encouraged us to use our brains and to ponder upon His creation 
         and to search for new roads of human progress and innovation through research 
         and reflection' (Mirza Masroor Ahmad)</p>
         <h2>Authors</h2>
         <p>List of contributors...</p>")
  })
  
  # Create a reactive hazard ratio meta-analysis object using metagen()
  metaObj <- reactive({
    req(dataInput())
    dat <- dataInput()
    metagen(TE = log(dat$HR), 
            seTE = dat$seHR, 
            studlab = dat$author, 
            data = dat,
            common = (input$effectModel == "FE"),
            random = (input$effectModel == "RE"),
            method.tau = input$method.tau,
            sm = "HR")
  })
  
  # Create a reactive rma object for heterogeneity & diagnostics using metafor
  rmaObj <- reactive({
    req(dataInput())
    dat <- dataInput()
    rma(yi = log(dat$HR), vi = (dat$seHR)^2, slab = dat$author, method = input$method.tau)
  })
  
  # Display main meta summary
  output$mainMetaText <- renderPrint({
    req(metaObj())
    cat("=== Main Meta-Analysis Summary ===\n\n")
    print(summary(metaObj()))
  })
  
  # SAMPLE CSV INFO
  output$sampleCSV <- renderUI({
    HTML(paste0(
      "<h2>Hazard Ratio Meta-Analysis Example CSV</h2>",
      "<p>The CSV should include: HR, seHR, author. For metaâ€‘regression, also include: Reg, Reg2, Reg3, year, and optionally a 'Subgroup' column for subgroup analysis.</p>",
      "<pre>",
      "HR,seHR,author,Reg,Reg2,Reg3,year,Subgroup\n",
      "1.50,0.20,StudyA,0.5,1.0,0.8,2018,Male\n",
      "1.70,0.25,StudyB,0.6,1.2,0.7,2019,Male\n",
      "1.30,0.15,StudyC,0.4,0.9,0.6,2020,Female\n",
      "1.20,0.12,StudyD,0.6,1.4,0.85,2018,Female\n",
      "1.80,0.25,StudyE,0.65,1.0,0.6,2019,Male\n",
      "1.30,0.10,StudyF,0.4,1.5,0.9,2020,Female\n",
      "1.70,0.22,StudyG,0.5,1.2,0.75,2021,Male\n",
      "1.40,0.16,StudyH,0.55,1.3,0.8,2022,Female\n",
      "1.60,0.20,StudyI,0.6,1.1,0.7,2023,Male\n",
      "1.35,0.14,StudyJ,0.45,1.4,0.85,2024,Female\n",
      "</pre>"
    ))
  })
  
  # ======== DESCRIPTIVE STATS ========
  output$descSummary <- renderPrint({
    req(dataInput())
    summary(dataInput())
  })
  
  output$histLogHR <- renderPlot({
    req(dataInput())
    dat <- dataInput()
    ggplot(dat, aes(x = log(HR))) +
      geom_histogram(binwidth = 0.1, color = "black") +
      labs(title = "Histogram of log(HR)", x = "log(HR)", y = "Count") +
      theme_minimal()
  })
  
  output$histHR <- renderPlot({
    req(dataInput())
    dat <- dataInput()
    ggplot(dat, aes(x = HR)) +
      geom_histogram(binwidth = 0.1, color = "black") +
      labs(title = "Histogram of HR", x = "Hazard Ratio", y = "Count") +
      theme_minimal()
  })
  
  output$beeswarmPlot <- renderPlot({
    req(dataInput())
    dat <- dataInput()
    ggplot(dat, aes(x = 1, y = log(HR))) +
      geom_beeswarm(size = 2, color = "blue") +
      labs(title = "Beeswarm of log(HR)", x = "", y = "log(HR)") +
      theme_minimal()
  })
  
  ## FOREST PLOTS
  output$MA <- renderPlot({
    req(metaObj())
    forest(metaObj(),
           xlab = "Log Hazard Ratio",
           col.diamond = input$col.diamond,
           col.diamond.lines = input$col.diamond.lines,
           col.square = input$col.square,
           col.square.lines = input$col.square.lines,
           col.study = input$col.study,
           col.circle = input$col.circle,
           col.circle.lines = input$col.circle.lines,
           labstudies = input$labstudies,
           cex = input$textsize,
           lwd = input$linewidth,
           label.left = input$label,
           label.right = input$labelr,
           xlim = input$xRange,
           prediction = TRUE)
  })
  
  output$forestPlot <- renderPlot({
    req(metaObj())
    forest(metaObj(),
           xlab = "Log Hazard Ratio",
           col.diamond = input$col.diamond,
           col.diamond.lines = input$col.diamond.lines,
           col.square = input$col.square,
           col.square.lines = input$col.square.lines,
           col.study = input$col.study,
           col.circle = input$col.circle,
           col.circle.lines = input$col.circle.lines,
           labstudies = input$labstudies,
           cex = input$textsize,
           lwd = input$linewidth,
           label.left = input$label,
           label.right = input$labelr,
           xlim = input$xRange,
           prediction = TRUE)
  })
  
  output$forestPlotJAMA <- renderPlot({
    req(metaObj())
    forest(metaObj(),
           prediction = FALSE,
           layout = "JAMA",
           col.diamond = input$col.diamond,
           col.diamond.lines = input$col.diamond.lines,
           col.square = input$col.square,
           col.square.lines = input$col.square.lines,
           col.study = input$col.study,
           col.circle = input$col.circle,
           col.circle.lines = input$col.circle.lines,
           labstudies = input$labstudies,
           cex = input$textsize,
           lwd = input$linewidth)
  })
  
  output$forestPlotRevman5 <- renderPlot({
    req(metaObj())
    forest(metaObj(),
           prediction = FALSE,
           layout = "RevMan5",
           col.diamond = input$col.diamond,
           col.diamond.lines = input$col.diamond.lines,
           col.square = input$col.square,
           col.square.lines = input$col.square.lines,
           col.study = input$col.study,
           col.circle = input$col.circle,
           col.circle.lines = input$col.circle.lines,
           labstudies = input$labstudies,
           cex = input$textsize,
           lwd = input$linewidth)
  }, height = reactive(input$plotHeight), width = reactive(input$plotWidth))
  
  output$forestPlotHR <- renderPlot({
    req(metaObj())
    forest(metaObj(),
           atransf = exp,
           xlab = "Hazard Ratio (Original Scale)",
           col.diamond = input$col.diamond,
           col.diamond.lines = input$col.diamond.lines,
           col.square = input$col.square,
           col.square.lines = input$col.square.lines,
           col.study = input$col.study,
           col.circle = input$col.circle,
           col.circle.lines = input$col.circle.lines,
           labstudies = input$labstudies,
           cex = input$textsize,
           lwd = input$linewidth,
           label.left = input$label,
           label.right = input$labelr,
           xlim = input$xRange,
           prediction = TRUE)
  })
  
  ## PUBLICATION BIAS
  output$pubbias <- renderPrint({
    req(metaObj())
    print(summary(metaObj()))
  })
  
  output$funnelPlot <- renderPlot({
    req(metaObj())
    col.contour <- c("gray75", "gray85", "gray95")
    if (input$colorFunnel) {
      funnel(metaObj(), xlim = input$funnelXRange,
             contour = c(0.9, 0.95, 0.99),
             col.contour = col.contour)
      legend("topright", inset = 0.05,
             legend = c("p < 0.1", "p < 0.05", "p < 0.01"),
             fill = col.contour)
      title(main = "Contour-Enhanced Funnel Plot")
    } else {
      funnel(metaObj(), xlim = input$funnelXRange)
    }
  })
  
  output$Trimfill <- renderPlot({
    req(metaObj())
    tf_obj <- trimfill(metaObj())
    funnel(tf_obj,
           contour = c(0.9, 0.95, 0.99),
           col.contour = c("gray75", "gray85", "gray95"))
    legend("topright", inset = 0.05,
           legend = c("p < 0.1", "p < 0.05", "p < 0.01"),
           fill = c("gray75", "gray85", "gray95"))
    title(main = "Funnel Plot (Trim & Fill Method)")
  })
  
  output$lm <- renderPlot({
    req(metaObj())
    lm_obj <- limitmeta(metaObj())
    funnel(lm_obj)
  })
  
  output$lm2 <- renderPlot({
    req(metaObj())
    lm_obj <- limitmeta(metaObj())
    funnel(lm_obj, shrunken = TRUE)
  })
  
  output$eggerTest <- renderPrint({
    req(metaObj())
    test <- metabias(metaObj(), method.bias = "Egger")
    print(test)
  })
  
  output$beggTest <- renderPrint({
    req(metaObj())
    test_begg <- metabias(metaObj(), method.bias = "Begg")
    print(test_begg)
  })
  
  copasObj <- reactive({
    req(metaObj())
    metasens::copas(metaObj())
  })
  
  output$copasOutput <- renderPrint({
    cObj <- copasObj()
    if (is.null(cObj)) {
      cat("No Copas model result.")
    } else {
      print(summary(cObj))
    }
  })
  
  output$copasPlot <- renderPlot({
    cObj <- copasObj()
    if(!is.null(cObj)){
      plot(cObj)
    } else {
      plot.new()
      text(0.5,0.5,"No Copas model result.")
    }
  })
  
  ## Heterogeneity & Sensitivity
  output$hetro <- renderPrint({
    req(metaObj())
    print(summary(metaObj()))
  })
  
  output$Baujatplot <- renderPlot({
    req(rmaObj())
    baujat(rmaObj())
  })
  
  output$radial <- renderPlot({
    req(rmaObj())
    radial(rmaObj())
  })
  
  output$drapery <- renderPlot({
    req(metaObj())
    drapery(metaObj(), labels = "studlab", type = "pval", legend = FALSE)
  })
  
  output$leaveOneOutText <- renderPrint({
    req(metaObj())
    loo_obj <- metainf(metaObj())
    print(loo_obj)
  })
  
  # TauÂ² Profile
  tau2ProfileObj <- reactive({
    req(rmaObj())
    pr <- try(profile(rmaObj()))
    if (inherits(pr, "try-error")) return(NULL)
    pr
  })
  
  output$tau2ProfilePlot <- renderPlot({
    pr <- tau2ProfileObj()
    if (is.null(pr)) {
      plot.new()
      text(0.5, 0.5, "Cannot profile tauÂ² with current model/method.", cex = 1.2)
    } else {
      plot(pr)
    }
  })
  
  output$tau2ProfileText <- renderPrint({
    pr <- tau2ProfileObj()
    if (is.null(pr)) {
      cat("No tauÂ² profile available.")
    } else {
      print(pr)
    }
  })
  
  output$influencePlot <- renderPlot({
    req(rmaObj())
    inf <- influence(rmaObj())
    plot(inf)
  })
  
  output$influenceText <- renderPrint({
    req(rmaObj())
    inf <- influence(rmaObj())
    print(inf)
  })
  
  ## META-REGRESSION
  output$metareg <- renderPrint({
    req(dataInput())
    dat <- dataInput()
    if(!("Reg" %in% names(dat))){
      cat("Moderator variable 'Reg' not found in the data.")
      return()
    }
    if (!isTRUE(input$includeModerator)) {
      cat("Meta-regression not performed. Please check 'Include Moderator in Meta-Regression'.")
      return()
    }
    reg_result <- metareg(metaObj(), ~ Reg)
    print(reg_result)
  })
  
  output$singleMetaregText <- renderPrint({
    req(dataInput())
    dat <- dataInput()
    if(!("Reg" %in% names(dat)) || !("Reg2" %in% names(dat))){
      cat("Moderator columns 'Reg' and/or 'Reg2' not found in the data.")
      return()
    }
    reg_result <- metareg(metaObj(), ~ Reg + Reg2)
    print(reg_result)
  })
  
  output$threeMetaregText <- renderPrint({
    req(dataInput())
    dat <- dataInput()
    if (!all(c("Reg", "Reg2", "Reg3") %in% names(dat))) {
      cat("One or more moderator columns ('Reg', 'Reg2', 'Reg3') are missing in the data.")
      return()
    }
    reg_result <- metareg(metaObj(), ~ Reg + Reg2 + Reg3)
    print(reg_result)
  })
  
  output$BubblePlot <- renderPlot({
    req(dataInput())
    dat <- dataInput()
    if(!("Reg" %in% names(dat))){
      plot.new()
      text(0.5, 0.5, "Moderator variable 'Reg' not found.", cex = 1.5)
    } else {
      reg_result <- metareg(metaObj(), ~ Reg)
      bubble(reg_result, studlab = TRUE, main = "Bubble Plot for Moderator: Reg")
    }
  })
  
  output$singleBubblePlot <- renderPlot({
    req(dataInput())
    dat <- dataInput()
    if (!(input$selectedModerator %in% names(dat))) {
      plot.new()
      text(0.5, 0.5, paste("Moderator", input$selectedModerator, "not found."), cex = 1.5)
    } else {
      reg_result <- metareg(metaObj(), as.formula(paste("~", input$selectedModerator)))
      bubble(reg_result, studlab = TRUE, main = paste("Bubble Plot for Moderator:", input$selectedModerator))
    }
  })
  
  output$mmreg <- renderPlot({
    req(dataInput())
    dat <- dataInput()
    if(!all(c("Reg", "Reg2", "Reg3") %in% names(dat))){
      plot.new()
      text(0.5, 0.5, "Not all moderator columns (Reg, Reg2, Reg3) are present.", cex = 1.5)
    } else {
      reg_result <- metareg(metaObj(), ~ Reg + Reg2 + Reg3)
      mod_data <- dat[, c("Reg", "Reg2", "Reg3")]
      if(ncol(mod_data) > 1){
        pairs(mod_data, main = "Moderator Variables Correlation")
      } else {
        plot.new()
        text(0.5, 0.5, "Not enough moderator variables for correlation plot.", cex = 1.5)
      }
    }
  })
  
  output$modCorrPlot <- renderPlot({
    req(dataInput())
    dat <- dataInput()
    if(all(c("Reg", "Reg2", "Reg3") %in% names(dat))){
      mod_data <- dat[, c("Reg", "Reg2", "Reg3")]
      pairs(mod_data, main = "Moderator Correlation Plot")
    } else {
      plot.new()
      text(0.5, 0.5, "Moderator variables missing for correlation plot.", cex = 1.5)
    }
  })
  
  ## OTHER ANALYSES
  output$cumMetaText <- renderPrint({
    req(metaObj(), dataInput())
    dat <- dataInput()
    cum_obj <- if("year" %in% names(dat)) {
      metacum(metaObj(), sortvar = dat$year)
    } else {
      metacum(metaObj())
    }
    print(summary(cum_obj))
  })
  
  output$cumForestPlot <- renderPlot({
    req(metaObj(), dataInput())
    dat <- dataInput()
    cum_obj <- if("year" %in% names(dat)) {
      metacum(metaObj(), sortvar = dat$year)
    } else {
      metacum(metaObj())
    }
    forest(cum_obj,
           col.diamond = input$col.diamond,
           col.diamond.lines = input$col.diamond.lines,
           col.square = input$col.square,
           col.square.lines = input$col.square.lines,
           col.study = input$col.study,
           col.circle = input$col.circle,
           col.circle.lines = input$col.circle.lines,
           labstudies = input$labstudies,
           cex = input$textsize,
           lwd = input$linewidth,
           label.left = input$label,
           label.right = input$labelr,
           xlim = input$xRange,
           prediction = TRUE)
  })
  
  output$timeTrendText <- renderPrint({
    req(metaObj(), dataInput())
    dat <- dataInput()
    if(!("year" %in% names(dat))){
      cat("No 'year' column found in the data. Please include a 'year' column for time-trend meta-regression.")
    } else {
      reg_time <- metareg(metaObj(), ~ year)
      print(summary(reg_time))
    }
  })
  
  output$timeTrendPlot <- renderPlot({
    req(dataInput())
    dat <- dataInput()
    if(!("year" %in% names(dat))){
      plot.new()
      text(0.5, 0.5, "No 'year' column found.", cex = 1.5)
    } else {
      reg_time <- metareg(metaObj(), ~ year)
      plot(reg_time)
    }
  })
  
  output$bayesianMetaText <- renderPrint({
    req(metaObj(), dataInput())
    dat <- dataInput()
    logHR <- log(dat$HR)
    seHR <- dat$seHR
    bmeta <- bayesmeta(y = logHR, sigma = seHR)
    print(summary(bmeta))
  })
  
  # Subgroup Analysis
  subgroupMetaObj <- reactive({
    req(dataInput())
    dat <- dataInput()
    
    if ("Subgroup" %in% colnames(dat)) {
      metagen(TE = log(dat$HR),
              seTE = dat$seHR,
              studlab = dat$author,
              data = dat,
              common = (input$effectModel == "FE"),
              random = (input$effectModel == "RE"),
              method.tau = input$method.tau,
              sm = "HR",
              subgroup = dat$Subgroup)
    } else {
      return(NULL)
    }
  })
  
  output$subgroupText <- renderPrint({
    sg <- subgroupMetaObj()
    if (is.null(sg)) {
      cat("No 'Subgroup' column found in the data. Please include a 'Subgroup' variable to perform subgroup analysis.")
    } else {
      print(summary(sg))
    }
  })
  
  output$subgroupForestPlot <- renderPlot({
    sg <- subgroupMetaObj()
    if (is.null(sg)) {
      plot.new()
      text(0.5, 0.5, "No 'Subgroup' column found. Cannot plot subgroup analysis.", cex = 1.3)
    } else {
      forest(sg,
             xlab = "Log Hazard Ratio",
             col.diamond = input$col.diamond,
             col.diamond.lines = input$col.diamond.lines,
             col.square = input$col.square,
             col.square.lines = input$col.square.lines,
             col.study = input$col.study,
             col.circle = input$col.circle,
             col.circle.lines = input$col.circle.lines,
             labstudies = input$labstudies,
             cex = input$textsize,
             lwd = input$linewidth,
             label.left = input$label,
             label.right = input$labelr,
             xlim = input$xRange,
             prediction = TRUE)
    }
  })
  
  output$downloadSubgroupForestPlot <- downloadHandler(
    filename = function() {
      paste("subgroup_forest_plot_", Sys.Date(), ".png", sep = "")
    },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      
      sg <- subgroupMetaObj()
      if (is.null(sg)) {
        plot.new()
        text(0.5, 0.5, "No 'Subgroup' column found.", cex = 1.3)
      } else {
        forest(sg,
               xlab = "Log Hazard Ratio",
               col.diamond = input$col.diamond,
               col.diamond.lines = input$col.diamond.lines,
               col.square = input$col.square,
               col.square.lines = input$col.square.lines,
               col.study = input$col.study,
               col.circle = input$col.circle,
               col.circle.lines = input$col.circle.lines,
               labstudies = input$labstudies,
               cex = input$textsize,
               lwd = input$linewidth,
               label.left = input$label,
               label.right = input$labelr,
               xlim = input$xRange,
               prediction = TRUE)
      }
      
      dev.off()
    }
  )
  
  ## DOWNLOAD HANDLERS FOR OTHER PLOTS
  output$downloadForestPlot <- downloadHandler(
    filename = function() { paste("ordinary_forest_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      forest(metaObj(),
             xlab = "Log Hazard Ratio",
             col.diamond = input$col.diamond,
             col.diamond.lines = input$col.diamond.lines,
             col.square = input$col.square,
             col.square.lines = input$col.square.lines,
             col.study = input$col.study,
             col.circle = input$col.circle,
             col.circle.lines = input$col.circle.lines,
             labstudies = input$labstudies,
             cex = input$textsize,
             lwd = input$linewidth,
             label.left = input$label,
             label.right = input$labelr,
             xlim = input$xRange,
             prediction = TRUE)
      dev.off()
    }
  )
  
  output$downloadPlotRevman5 <- downloadHandler(
    filename = function() { paste("forest_plot_revman5_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      forest(metaObj(),
             prediction = FALSE,
             layout = "RevMan5",
             col.diamond = input$col.diamond,
             col.diamond.lines = input$col.diamond.lines,
             col.square = input$col.square,
             col.square.lines = input$col.square.lines,
             col.study = input$col.study,
             col.circle = input$col.circle,
             col.circle.lines = input$col.circle.lines,
             labstudies = input$labstudies,
             cex = input$textsize,
             lwd = input$linewidth)
      dev.off()
    }
  )
  
  output$downloadPlotJAMA <- downloadHandler(
    filename = function() { paste("forest_plot_JAMA_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      forest(metaObj(),
             prediction = FALSE,
             layout = "JAMA",
             col.diamond = input$col.diamond,
             col.diamond.lines = input$col.diamond.lines,
             col.square = input$col.square,
             col.square.lines = input$col.square.lines,
             col.study = input$col.study,
             col.circle = input$col.circle,
             col.circle.lines = input$col.circle.lines,
             labstudies = input$labstudies,
             cex = input$textsize,
             lwd = input$linewidth)
      dev.off()
    }
  )
  
  output$downloadPlotmeta <- downloadHandler(
    filename = function() { paste("HR_meta_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      forest(metaObj(),
             xlab = "Log Hazard Ratio",
             col.diamond = input$col.diamond,
             col.diamond.lines = input$col.diamond.lines,
             col.square = input$col.square,
             col.square.lines = input$col.square.lines,
             col.study = input$col.study,
             col.circle = input$col.circle,
             col.circle.lines = input$col.circle.lines,
             labstudies = input$labstudies,
             cex = input$textsize,
             lwd = input$linewidth,
             label.left = input$label,
             label.right = input$labelr,
             xlim = input$xRange,
             prediction = TRUE)
      dev.off()
    }
  )
  
  output$downloadFunnelPlot <- downloadHandler(
    filename = function() { paste("funnel_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      col.contour <- c("gray75", "gray85", "gray95")
      if (input$colorFunnel) {
        funnel(metaObj(), xlim = input$funnelXRange,
               contour = c(0.9, 0.95, 0.99),
               col.contour = col.contour)
        legend("topright", inset = 0.05,
               legend = c("p < 0.1", "p < 0.05", "p < 0.01"),
               fill = col.contour)
        title(main = "Contour-Enhanced Funnel Plot")
      } else {
        funnel(metaObj(), xlim = input$funnelXRange)
      }
      dev.off()
    }
  )
  
  output$downloadTrimFillPlot <- downloadHandler(
    filename = function() { paste("trimfill_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      tf_obj <- trimfill(metaObj())
      funnel(tf_obj,
             contour = c(0.9, 0.95, 0.99),
             col.contour = c("gray75", "gray85", "gray95"))
      legend("topright", inset = 0.05,
             legend = c("p < 0.1", "p < 0.05", "p < 0.01"),
             fill = c("gray75", "gray85", "gray95"))
      title(main = "Funnel Plot (Trim & Fill Method)")
      dev.off()
    }
  )
  
  output$downloadBaujatPlot <- downloadHandler(
    filename = function() { paste("baujat_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      baujat(rmaObj())
      dev.off()
    }
  )
  
  output$downloadRadialPlot <- downloadHandler(
    filename = function() { paste("radial_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      radial(rmaObj())
      dev.off()
    }
  )
  
  output$downloadDraperyPlot <- downloadHandler(
    filename = function() { paste("drapery_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      drapery(metaObj(), labels = "studlab", type = "pval", legend = FALSE)
      dev.off()
    }
  )
  
  output$downloadCumForestPlot <- downloadHandler(
    filename = function() { paste("cumulative_forest_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      dat <- dataInput()
      cum_obj <- if("year" %in% names(dat)) {
        metacum(metaObj(), sortvar = dat$year)
      } else {
        metacum(metaObj())
      }
      forest(cum_obj,
             col.diamond = input$col.diamond,
             col.diamond.lines = input$col.diamond.lines,
             col.square = input$col.square,
             col.square.lines = input$col.square.lines,
             col.study = input$col.study,
             col.circle = input$col.circle,
             col.circle.lines = input$col.circle.lines,
             labstudies = input$labstudies,
             cex = input$textsize,
             lwd = input$linewidth,
             label.left = input$label,
             label.right = input$labelr,
             xlim = input$xRange,
             prediction = TRUE)
      dev.off()
    }
  )
  
  output$downloadEggerTest <- downloadHandler(
    filename = function() { paste("egger_test_", Sys.Date(), ".txt", sep = "") },
    content = function(file) {
      test <- metabias(metaObj(), method.bias = "Egger")
      writeLines(capture.output(print(test)), con = file)
    }
  )
  
  output$downloadModCorrPlot <- downloadHandler(
    filename = function() { paste("mod_corr_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      dat <- dataInput()
      if(all(c("Reg", "Reg2", "Reg3") %in% names(dat))){
        mod_data <- dat[, c("Reg", "Reg2", "Reg3")]
        pairs(mod_data, main = "Moderator Correlation Plot")
      } else {
        plot.new()
        text(0.5, 0.5, "Moderator variables missing for correlation plot.", cex = 1.5)
      }
      dev.off()
    }
  )
  
  output$downloadTimeTrendPlot <- downloadHandler(
    filename = function() { paste("time_trend_plot_", Sys.Date(), ".png", sep = "") },
    content = function(file) {
      png(file, width = input$plotWidth, height = input$plotHeight)
      dat <- dataInput()
      if(!("year" %in% names(dat))){
        plot.new()
        text(0.5, 0.5, "No 'year' column found.", cex = 1.5)
      } else {
        reg_time <- metareg(metaObj(), ~ year)
        plot(reg_time)
      }
      dev.off()
    }
  )
}

# Run the application
shinyApp(ui = ui, server = server)
